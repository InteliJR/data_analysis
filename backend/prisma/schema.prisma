generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// AUTENTICAÇÃO E USUÁRIOS
// ============================================

enum UserRole {
  ADMIN       // Acessa tudo + gestão de usuários
  COMERCIAL   // Vê produtos e matérias-primas
  LOGISTICA   // Vê frete (além de admin)
  IMPOSTO     // Mexe nas premissas/impostos (além de admin)
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String
  role      UserRole
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relações
  createdProducts Product[]
  revokedTokens   RevokedToken[]

  @@map("users")
}

model RevokedToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relações
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([expiresAt])
  @@index([userId])
  @@map("revoked_tokens")
}

// ============================================
// IMPOSTOS E PREMISSAS
// ============================================

model Tax {
  id          String   @id @default(uuid())
  name        String
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relações
  taxItems     TaxItem[]
  rawMaterials RawMaterial[]

  @@map("taxes")
}

// Items específicos de imposto (PIS, COFINS, ICMS, IPI, etc)
model TaxItem {
  id          String  @id @default(uuid())
  taxId       String
  name        String // PIS, COFINS, ICMS, IPI, IR e CSLL, COMISSÕES, etc
  rate        Decimal @db.Decimal(5, 2) // Percentual (ex: 7.60)
  recoverable Boolean @default(false) // Se é premissa recuperável
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relações
  tax Tax @relation(fields: [taxId], references: [id], onDelete: Cascade)

  @@index([taxId])
  @@map("tax_items")
}

// ============================================
// FRETE (TRANSPORTE)
// ============================================

enum Currency {
  BRL
  USD
  EUR
}

model Freight {
  id               String   @id @default(uuid())
  name             String
  description      String?  @db.Text
  paymentTerm      Int // dias
  unitPrice        Decimal  @db.Decimal(12, 2)
  currency         Currency @default(BRL)
  additionalCosts  Decimal  @default(0) @db.Decimal(12, 2)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relações
  freightTaxes FreightTax[]
  rawMaterials RawMaterial[]

  @@map("freights")
}

// Impostos do frete (ICMS, PIS, COFINS)
model FreightTax {
  id        String  @id @default(uuid())
  freightId String
  name      String // ICMS, PIS, COFINS
  rate      Decimal @db.Decimal(5, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relações
  freight Freight @relation(fields: [freightId], references: [id], onDelete: Cascade)

  @@index([freightId])
  @@map("freight_taxes")
}

// ============================================
// MATÉRIAS-PRIMAS
// ============================================

enum MeasurementUnit {
  KG
  G
  L
  ML
  M
  CM
  UN
  CX
  PC
}

model RawMaterial {
  id                 String          @id @default(uuid())
  code               String          @unique
  name               String
  description        String?         @db.Text
  measurementUnit    MeasurementUnit
  inputGroup         String? // Grupo de insumo (texto livre)
  paymentTerm        Int // dias
  acquisitionPrice   Decimal         @db.Decimal(12, 2)
  currency           Currency        @default(BRL)
  priceConvertedBrl  Decimal         @db.Decimal(12, 2)
  additionalCost     Decimal         @default(0) @db.Decimal(12, 2)
  
  // Relações obrigatórias (1 imposto, 1 frete)
  taxId              String
  freightId          String
  
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt

  // Relações
  tax                Tax             @relation(fields: [taxId], references: [id], onDelete: Restrict)
  freight            Freight         @relation(fields: [freightId], references: [id], onDelete: Restrict)
  productRawMaterials ProductRawMaterial[]
  changeLogs         RawMaterialChangeLog[]

  @@index([code])
  @@index([name])
  @@index([taxId])
  @@index([freightId])
  @@map("raw_materials")
}

// Log de alterações de matérias-primas
model RawMaterialChangeLog {
  id            String   @id @default(uuid())
  rawMaterialId String
  field         String // Nome do campo alterado
  oldValue      String? // Valor antigo
  newValue      String? // Valor novo
  changedBy     String // ID do usuário que fez a alteração
  changedAt     DateTime @default(now())

  // Relações
  rawMaterial RawMaterial @relation(fields: [rawMaterialId], references: [id], onDelete: Cascade)

  @@index([rawMaterialId])
  @@index([changedAt])
  @@map("raw_material_change_logs")
}

// ============================================
// PRODUTOS
// ============================================

model Product {
  id          String   @id @default(uuid())
  code        String   @unique // Numérico apenas
  name        String
  description String?  @db.Text
  creatorId   String
  
  // Preço automático (calculado, mas pode ser armazenado para cache)
  priceWithoutTaxesAndFreight Decimal? @db.Decimal(12, 2)
  priceWithTaxesAndFreight    Decimal? @db.Decimal(12, 2)
  
  // Relação opcional com custo fixo (0 ou 1)
  fixedCostId String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relações
  creator             User              @relation(fields: [creatorId], references: [id])
  fixedCost           FixedCost?        @relation(fields: [fixedCostId], references: [id], onDelete: SetNull)
  productRawMaterials ProductRawMaterial[]

  @@index([code])
  @@index([name])
  @@index([fixedCostId])
  @@map("products")
}

// ============================================
// RELAÇÃO PRODUTO <-> MATÉRIA-PRIMA
// ============================================

model ProductRawMaterial {
  productId     String
  rawMaterialId String
  quantity      Decimal  @db.Decimal(10, 2)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relações
  product     Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  rawMaterial RawMaterial @relation(fields: [rawMaterialId], references: [id], onDelete: Restrict)

  @@id([productId, rawMaterialId])
  @@map("product_raw_materials")
}

// ============================================
// CUSTOS FIXOS (OVERHEAD)
// ============================================

model FixedCost {
  id                String   @id @default(uuid())
  description       String
  code              String?  @unique
  personnelExpenses Decimal  @db.Decimal(12, 2)
  generalExpenses   Decimal  @db.Decimal(12, 2)
  proLabore         Decimal  @db.Decimal(12, 2)
  depreciation      Decimal  @default(0) @db.Decimal(12, 2)
  totalCost         Decimal  @db.Decimal(12, 2)
  
  // Parâmetros para cálculo de overhead
  considerationPercentage Decimal @default(100) @db.Decimal(5, 2) // % de gastos a considerar
  salesVolume             Decimal @db.Decimal(12, 2) // Volume de vendas para cálculo
  overheadPerUnit         Decimal @db.Decimal(12, 2) // Overhead por unidade
  
  calculationDate   DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relações
  products Product[]

  @@index([calculationDate])
  @@map("fixed_costs")
}